{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "ARM Template",
      "version": "1.0.0.0",
      "templateHash": "19AutoRestartAlwaysOnApps"
    }
  },
  "parameters": {
    "appServiceName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "The name of the Azure App Service with AlwaysOn capability. Must be globally unique."
      }
    },
    "logicAppName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 80,
      "metadata": {
        "description": "The name of the Logic App for auto-restart functionality."
      }
    },
    "alertEmail": {
      "type": "string",
      "metadata": {
        "description": "Email address to receive restart notifications."
      }
    },
    "slackWebhookUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Slack webhook URL for notifications (optional). Leave empty to disable Slack notifications."
      }
    },

  },
  "variables": {
    "location": "[resourceGroup().location]",
    "appServicePlanName": "[format('plan-{0}', parameters('appServiceName'))]",
    "applicationInsightsName": "[format('ai-{0}', parameters('appServiceName'))]",
    "logAnalyticsWorkspaceName": "[format('law-{0}', parameters('appServiceName'))]",
    "actionGroupName": "[format('ag-restart-{0}', parameters('appServiceName'))]",
    "activityLogAlertName": "[format('alert-appstopped-{0}', parameters('appServiceName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "S1",
        "tier": "Standard"
      },
      "properties": {
        "name": "[variables('appServicePlanName')]",
        "reserved": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('appServiceName')]",
      "location": "[variables('location')]",
      "kind": "app",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "AlwaysOn": "true"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('logicAppName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "alertEmail": {
              "type": "String"
            },
            "senderEmail": {
              "type": "String"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schemaId": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "essentials": {
                          "type": "object",
                          "properties": {
                            "alertRule": { "type": "string" },
                            "targetResourceGroup": { "type": "string" },
                            "severity": { "type": "string" }
                          }
                        },
                        "alertContext": {
                          "type": "object",
                          "properties": {
                            "authorization": {
                              "type": "object",
                              "properties": {
                                "action": { "type": "string" },
                                "scope": { "type": "string" }
                              }
                            },
                            "caller": { "type": "string" },
                            "eventTimestamp": { "type": "string" },
                            "operationName": { "type": "string" },
                            "status": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "actions": {
            "Parse_Activity_Log_Data": {
              "runAfter": {},
              "type": "Compose",
              "inputs": {
                "resourceId": "@triggerBody()?['data']?['alertContext']?['authorization']?['scope']",
                "operationName": "@triggerBody()?['data']?['alertContext']?['operationName']",
                "eventTime": "@triggerBody()?['data']?['alertContext']?['eventTimestamp']",
                "caller": "@triggerBody()?['data']?['alertContext']?['caller']",
                "status": "@triggerBody()?['data']?['alertContext']?['status']",
                "resourceGroupName": "@triggerBody()?['data']?['essentials']?['targetResourceGroup']",
                "appName": "@if(empty(triggerBody()?['data']?['alertContext']?['authorization']?['scope']), 'Unknown', last(split(triggerBody()?['data']?['alertContext']?['authorization']?['scope'], '/')))"
              }
            },
            "Get_App_Service_Tags": {
              "runAfter": {
                "Parse_Activity_Log_Data": ["Succeeded"]
              },
              "type": "Http",
              "inputs": {
                "method": "GET",
                "uri": "https://management.azure.com@{outputs('Parse_Activity_Log_Data')?['resourceId']}?api-version=2022-03-01",
                "authentication": {
                  "type": "ManagedServiceIdentity"
                }
              }
            },
            "Check_AlwaysOn_Tag": {
              "runAfter": {
                "Get_App_Service_Tags": ["Succeeded"]
              },
              "type": "If",
              "expression": {
                "equals": [
                  "@body('Get_App_Service_Tags')?['tags']?['AlwaysOn']",
                  "true"
                ]
              },
              "actions": {
                "Restart_App_Service": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "https://management.azure.com@{outputs('Parse_Activity_Log_Data')?['resourceId']}/start?api-version=2022-03-01",
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    }
                  }
                },
                "Send_Restart_Notification": {
                  "runAfter": {
                    "Restart_App_Service": ["Succeeded"]
                  },
                  "type": "If",
                  "expression": {
                    "not": {
                      "equals": [
                        "@parameters('slackWebhookUrl')",
                        ""
                      ]
                    }
                  },
                  "actions": {
                    "Send_Slack_Restart": {
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "@parameters('slackWebhookUrl')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "text": "🔄 App Service Auto-Restarted: @{outputs('Parse_Activity_Log_Data')?['appName']}",
                          "attachments": [
                            {
                              "color": "good",
                              "title": "✅ Auto-Restart Successful",
                              "text": "Your App Service '@{outputs('Parse_Activity_Log_Data')?['appName']}' was automatically stopped but has been restarted because it has the 'AlwaysOn' tag set to 'true'.\n\n📋 Details:\n• App Name: @{outputs('Parse_Activity_Log_Data')?['appName']}\n• Stopped At: @{outputs('Parse_Activity_Log_Data')?['eventTime']}\n• Stopped By: @{outputs('Parse_Activity_Log_Data')?['caller']}\n• Restarted At: @{utcNow()}\n• Action Taken: Automatically restarted\n\n✅ Your app is now running again!"
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "Log_Restart_Details": {
                  "runAfter": {
                    "Send_Restart_Notification": ["Succeeded", "Failed"]
                  },
                  "type": "Compose",
                  "inputs": {
                    "message": "✅ Successfully restarted App Service: @{outputs('Parse_Activity_Log_Data')?['appName']}",
                    "details": {
                      "appName": "@{outputs('Parse_Activity_Log_Data')?['appName']}",
                      "stoppedBy": "@{outputs('Parse_Activity_Log_Data')?['caller']}",
                      "stoppedAt": "@{outputs('Parse_Activity_Log_Data')?['eventTime']}",
                      "restartedAt": "@{utcNow()}",
                      "action": "Auto-restarted due to AlwaysOn tag"
                    }
                  }
                },
                "Log_Restart_Success": {
                  "runAfter": {
                    "Log_Restart_Details": ["Succeeded", "Failed"]
                  },
                  "type": "Compose",
                  "inputs": {
                    "message": "✅ Successfully restarted App Service: @{outputs('Parse_Activity_Log_Data')?['appName']}",
                    "timestamp": "@{utcNow()}",
                    "appName": "@{outputs('Parse_Activity_Log_Data')?['appName']}",
                    "originalStopTime": "@{outputs('Parse_Activity_Log_Data')?['eventTime']}",
                    "restartedBy": "Auto-Restart Logic App",
                    "notificationSent": "Yes"
                  }
                }
              },
              "else": {
                "actions": {
                  "Send_No_Action_Notification": {
                    "type": "If",
                    "expression": {
                      "not": {
                        "equals": [
                          "@parameters('slackWebhookUrl')",
                          ""
                        ]
                      }
                    },
                    "actions": {
                      "Send_Slack_No_Action": {
                        "type": "Http",
                        "inputs": {
                          "method": "POST",
                          "uri": "@parameters('slackWebhookUrl')",
                          "headers": {
                            "Content-Type": "application/json"
                          },
                          "body": {
                            "text": "⚠️ App Service Stopped (No Auto-Restart): @{outputs('Parse_Activity_Log_Data')?['appName']}",
                            "attachments": [
                              {
                                "color": "warning",
                                "title": "⚠️ App Service Stopped - No Auto-Restart",
                                "text": "Your App Service '@{outputs('Parse_Activity_Log_Data')?['appName']}' was stopped but will NOT be automatically restarted because it does not have the 'AlwaysOn' tag set to 'true'.\n\n📋 Details:\n• App Name: @{outputs('Parse_Activity_Log_Data')?['appName']}\n• Stopped At: @{outputs('Parse_Activity_Log_Data')?['eventTime']}\n• Stopped By: @{outputs('Parse_Activity_Log_Data')?['caller']}\n• Action Taken: No auto-restart (missing AlwaysOn tag)\n\n💡 To enable auto-restart, add the tag 'AlwaysOn' with value 'true' to this App Service."
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "Log_No_Action_Details": {
                    "runAfter": {
                      "Send_No_Action_Notification": ["Succeeded", "Failed"]
                    },
                    "type": "Compose",
                    "inputs": {
                      "message": "⚠️ App Service stopped but no restart needed",
                      "details": {
                        "appName": "@{outputs('Parse_Activity_Log_Data')?['appName']}",
                        "stoppedBy": "@{outputs('Parse_Activity_Log_Data')?['caller']}",
                        "stoppedAt": "@{outputs('Parse_Activity_Log_Data')?['eventTime']}",
                        "reason": "AlwaysOn tag not set to 'true'",
                        "action": "No restart performed"
                      }
                    }
                  },
                  "Log_No_Action_Needed": {
                    "runAfter": {
                      "Log_No_Action_Details": ["Succeeded", "Failed"]
                    },
                    "type": "Compose",
                    "inputs": {
                      "message": "App Service @{outputs('Parse_Activity_Log_Data')?['appName']} was stopped but does not have AlwaysOn tag set to 'true'. No action taken.",
                      "timestamp": "@{utcNow()}",
                      "appName": "@{outputs('Parse_Activity_Log_Data')?['appName']}",
                      "originalStopTime": "@{outputs('Parse_Activity_Log_Data')?['eventTime']}",
                      "notificationSent": "Yes"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "appName": {
              "type": "string",
              "value": "@{outputs('Parse_Activity_Log_Data')?['appName']}"
            },
            "actionTaken": {
              "type": "string",
              "value": "@{if(equals(body('Get_App_Service_Tags')?['tags']?['AlwaysOn'], 'true'), 'Restarted', 'No action - AlwaysOn tag not set')}"
            }
          }
        },
        "parameters": {
          "alertEmail": {
            "value": "[parameters('alertEmail')]"
          },
          "slackWebhookUrl": {
            "value": "[parameters('slackWebhookUrl')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[variables('actionGroupName')]",
      "location": "Global",
      "properties": {
        "groupShortName": "AutoRestart",
        "enabled": true,
        "emailReceivers": [],
        "webhookReceivers": [
          {
            "name": "LogicAppRestart",
            "serviceUri": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', parameters('logicAppName')), '/triggers/manual'), '2019-05-01').value]",
            "useCommonAlertSchema": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/activityLogAlerts",
      "apiVersion": "2020-10-01",
      "name": "[variables('activityLogAlertName')]",
      "location": "Global",
      "properties": {
        "description": "Alert when any App Service with AlwaysOn tag is stopped",
        "enabled": true,
        "scopes": [
          "[resourceGroup().id]"
        ],
        "condition": {
          "allOf": [
            {
              "field": "category",
              "equals": "Administrative"
            },
            {
              "field": "operationName",
              "equals": "Microsoft.Web/sites/stop/action"
            },
            {
              "field": "status",
              "equals": "Succeeded"
            }
          ]
        },
        "actions": {
          "actionGroups": [
            {
              "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "appServiceUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', parameters('appServiceName'))]"
    },
    "logicAppName": {
      "type": "string",
      "value": "[parameters('logicAppName')]"
    },
    "appServiceResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
    },
    "monitoringStatus": {
      "type": "string",
      "value": "Auto-restart monitoring is active for apps with AlwaysOn tag"
    }
  }
} 