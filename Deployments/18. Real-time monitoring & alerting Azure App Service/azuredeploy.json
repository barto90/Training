{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "ARM Template",
      "version": "1.0.0.0",
      "templateHash": "18RealTimeMonitoringAlerting"
    }
  },
  "parameters": {
    "appServiceName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "The name of the Azure App Service to monitor. Must be globally unique."
      }
    },
    "logicAppName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 80,
      "metadata": {
        "description": "The name of the Logic App for alert processing."
      }
    },
    "alertEmail": {
      "type": "string",
      "metadata": {
        "description": "Email address to receive monitoring alerts."
      }
    },
    "responseTimeThresholdSeconds": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 1,
      "maxValue": 30,
      "metadata": {
        "description": "Alert when response time exceeds this many seconds."
      }
    },
    "errorRateThresholdPercent": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "Alert when error rate exceeds this percentage."
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "appServicePlanName": "[format('plan-{0}', parameters('appServiceName'))]",
    "applicationInsightsName": "[format('ai-{0}', parameters('appServiceName'))]",
    "logAnalyticsWorkspaceName": "[format('law-{0}', parameters('appServiceName'))]",
    "actionGroupName": "[format('ag-{0}', parameters('appServiceName'))]",
    "availabilityAlertName": "[format('alert-availability-{0}', parameters('appServiceName'))]",
    "responseTimeAlertName": "[format('alert-responsetime-{0}', parameters('appServiceName'))]",
    "errorRateAlertName": "[format('alert-errorrate-{0}', parameters('appServiceName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "S1",
        "tier": "Standard"
      },
      "properties": {
        "name": "[variables('appServicePlanName')]",
        "reserved": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('appServiceName')]",
      "location": "[variables('location')]",
      "kind": "app",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('logicAppName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "alertEmail": {
              "type": "String"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schemaId": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "essentials": {
                          "type": "object",
                          "properties": {
                            "alertId": { "type": "string" },
                            "alertRule": { "type": "string" },
                            "severity": { "type": "string" },
                            "monitorCondition": { "type": "string" },
                            "firedDateTime": { "type": "string" },
                            "description": { "type": "string" },
                            "alertTargetIDs": { "type": "array" }
                          }
                        },
                        "alertContext": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "actions": {
            "Initialize_Alert_Variables": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "alertSeverity",
                    "type": "string",
                    "value": "Medium"
                  },
                  {
                    "name": "isBusinessHours",
                    "type": "boolean",
                    "value": false
                  },
                  {
                    "name": "escalationRequired",
                    "type": "boolean",
                    "value": false
                  },
                  {
                    "name": "alertId",
                    "type": "string",
                    "value": "@{guid()}"
                  }
                ]
              }
            },
            "Parse_Alert_Data": {
              "runAfter": {
                "Initialize_Alert_Variables": ["Succeeded"]
              },
              "type": "Compose",
              "inputs": {
                "alertName": "@triggerBody()?['data']?['essentials']?['alertRule']",
                "alertDescription": "@triggerBody()?['data']?['essentials']?['description']",
                "status": "@triggerBody()?['data']?['essentials']?['monitorCondition']",
                "timestamp": "@triggerBody()?['data']?['essentials']?['firedDateTime']",
                "ruleName": "@triggerBody()?['data']?['essentials']?['alertRule']",
                "resourceName": "@if(greater(length(triggerBody()?['data']?['essentials']?['alertTargetIDs']), 0), split(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')[8], 'Unknown')",
                "resourceGroup": "@if(greater(length(triggerBody()?['data']?['essentials']?['alertTargetIDs']), 0), split(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')[4], 'Unknown')",
                "subscriptionId": "@if(greater(length(triggerBody()?['data']?['essentials']?['alertTargetIDs']), 0), split(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')[2], 'Unknown')",
                "severity": "@triggerBody()?['data']?['essentials']?['severity']"
              }
            },
            "Determine_Alert_Severity": {
              "runAfter": {
                "Parse_Alert_Data": ["Succeeded"]
              },
              "type": "Switch",
              "expression": "@outputs('Parse_Alert_Data')?['severity']",
              "cases": {
                "Critical": {
                  "case": "Sev0",
                  "actions": {
                    "Set_Critical_Severity": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "alertSeverity",
                        "value": "Critical"
                      }
                    },
                    "Set_Escalation_Required": {
                      "runAfter": {
                        "Set_Critical_Severity": ["Succeeded"]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "escalationRequired",
                        "value": true
                      }
                    }
                  }
                },
                "High": {
                  "case": "Sev1",
                  "actions": {
                    "Set_High_Severity": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "alertSeverity",
                        "value": "Critical"
                      }
                    },
                    "Set_High_Escalation": {
                      "runAfter": {
                        "Set_High_Severity": ["Succeeded"]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "escalationRequired",
                        "value": true
                      }
                    }
                  }
                },
                "Medium": {
                  "case": "Sev2",
                  "actions": {
                    "Set_Medium_Severity": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "alertSeverity",
                        "value": "Medium"
                      }
                    }
                  }
                }
              },
              "default": {
                "actions": {
                  "Set_Default_Severity": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "alertSeverity",
                      "value": "Low"
                    }
                  }
                }
              }
            },
            "Check_Business_Hours": {
              "runAfter": {
                "Determine_Alert_Severity": ["Succeeded"]
              },
              "type": "Compose",
              "inputs": {
                "currentHour": "@int(formatDateTime(utcNow(), 'HH'))",
                "currentDay": "@int(formatDateTime(utcNow(), 'dd'))"
              }
            },
            "Set_Business_Hours_Flag": {
              "runAfter": {
                "Check_Business_Hours": ["Succeeded"]
              },
              "type": "If",
              "expression": {
                "and": [
                  {
                    "greaterOrEquals": [
                      "@outputs('Check_Business_Hours')?['currentHour']",
                      9
                    ]
                  },
                  {
                    "lessOrEquals": [
                      "@outputs('Check_Business_Hours')?['currentHour']",
                      17
                    ]
                  }
                ]
              },
              "actions": {
                "Set_Business_Hours_True": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "isBusinessHours",
                    "value": true
                  }
                }
              }
            },
            "Multi_Channel_Notification_Switch": {
              "runAfter": {
                "Set_Business_Hours_Flag": ["Succeeded"]
              },
              "type": "Switch",
              "expression": "@variables('alertSeverity')",
              "cases": {
                "Critical": {
                  "case": "Critical",
                  "actions": {
                    "Send_Immediate_Email": {
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://outlook.office365.com/webhook/api",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "to": "@parameters('alertEmail')",
                          "subject": "🚨 CRITICAL ALERT: @{outputs('Parse_Alert_Data')?['alertName']}",
                          "htmlBody": "<div style='background:#dc3545;color:white;padding:20px;border-radius:8px;'><h2>🚨 CRITICAL ALERT</h2><table style='color:white;'><tr><td><strong>Alert:</strong></td><td>@{outputs('Parse_Alert_Data')?['alertName']}</td></tr><tr><td><strong>Resource:</strong></td><td>@{outputs('Parse_Alert_Data')?['resourceName']}</td></tr><tr><td><strong>Status:</strong></td><td>@{outputs('Parse_Alert_Data')?['status']}</td></tr><tr><td><strong>Time:</strong></td><td>@{outputs('Parse_Alert_Data')?['timestamp']}</td></tr><tr><td><strong>Alert ID:</strong></td><td>@{variables('alertId')}</td></tr></table><p><strong>Immediate Action Required!</strong></p><p>🔗 <a href='https://portal.azure.com' style='color:#fff;'>View in Azure Portal</a></p></div>"
                        }
                      }
                    },
                    "Send_Teams_Critical_Alert": {
                      "runAfter": {
                        "Send_Immediate_Email": ["Succeeded"]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://yourteam.webhook.office.com/webhookb2/critical-alerts",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "text": "🚨 CRITICAL ALERT: @{outputs('Parse_Alert_Data')?['alertName']} on @{outputs('Parse_Alert_Data')?['resourceName']} - Alert ID: @{variables('alertId')}"
                        }
                      }
                    },
                    "Trigger_SMS_Alert": {
                      "runAfter": {
                        "Send_Teams_Critical_Alert": ["Succeeded"]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://api.twilio.com/2010-04-01/Accounts/YOUR_ACCOUNT_SID/Messages.json",
                        "headers": {
                          "Authorization": "Basic YOUR_AUTH_TOKEN",
                          "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "To=+1234567890&From=+1987654321&Body=CRITICAL ALERT: @{outputs('Parse_Alert_Data')?['alertName']} on @{outputs('Parse_Alert_Data')?['resourceName']}. Alert ID: @{variables('alertId')}"
                      }
                    },
                    "Create_Incident_Ticket": {
                      "runAfter": {
                        "Trigger_SMS_Alert": ["Succeeded"]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://your-servicenow-instance.service-now.com/api/now/table/incident",
                        "headers": {
                          "Authorization": "Basic YOUR_SERVICENOW_TOKEN",
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "short_description": "CRITICAL: @{outputs('Parse_Alert_Data')?['alertName']}",
                          "description": "Azure Monitor Critical Alert\nResource: @{outputs('Parse_Alert_Data')?['resourceName']}\nStatus: @{outputs('Parse_Alert_Data')?['status']}\nTime: @{outputs('Parse_Alert_Data')?['timestamp']}\nAlert ID: @{variables('alertId')}",
                          "urgency": "1",
                          "priority": "1",
                          "category": "Azure Monitoring",
                          "subcategory": "App Service Alert"
                        }
                      }
                    }
                  }
                },
                "Medium": {
                  "case": "Medium",
                  "actions": {
                    "Send_Standard_Email": {
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://outlook.office365.com/webhook/api",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "to": "@parameters('alertEmail')",
                          "subject": "⚠️ Alert: @{outputs('Parse_Alert_Data')?['alertName']}",
                          "htmlBody": "<div style='background:#ffc107;color:black;padding:20px;border-radius:8px;'><h2>⚠️ MONITORING ALERT</h2><table><tr><td><strong>Alert:</strong></td><td>@{outputs('Parse_Alert_Data')?['alertName']}</td></tr><tr><td><strong>Resource:</strong></td><td>@{outputs('Parse_Alert_Data')?['resourceName']}</td></tr><tr><td><strong>Status:</strong></td><td>@{outputs('Parse_Alert_Data')?['status']}</td></tr><tr><td><strong>Time:</strong></td><td>@{outputs('Parse_Alert_Data')?['timestamp']}</td></tr></table></div>"
                        }
                      }
                    },
                    "Send_Teams_Warning": {
                      "runAfter": {
                        "Send_Standard_Email": ["Succeeded"]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://yourteam.webhook.office.com/webhookb2/monitoring-alerts",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "text": "⚠️ MONITORING ALERT: @{outputs('Parse_Alert_Data')?['alertName']} on @{outputs('Parse_Alert_Data')?['resourceName']} - Status: @{outputs('Parse_Alert_Data')?['status']}"
                        }
                      }
                    }
                  }
                }
              },
              "default": {
                "actions": {
                  "Send_Info_Email_Business_Hours_Only": {
                    "type": "If",
                    "expression": {
                      "equals": [
                        "@variables('isBusinessHours')",
                        true
                      ]
                    },
                    "actions": {
                      "Send_Info_Email": {
                        "type": "Http",
                        "inputs": {
                          "method": "POST",
                          "uri": "https://outlook.office365.com/webhook/api",
                          "headers": {
                            "Content-Type": "application/json"
                          },
                          "body": {
                            "to": "@parameters('alertEmail')",
                            "subject": "ℹ️ Info: @{outputs('Parse_Alert_Data')?['alertName']}",
                            "htmlBody": "<div style='background:#17a2b8;color:white;padding:15px;'><h3>ℹ️ INFORMATION</h3><p>@{outputs('Parse_Alert_Data')?['alertName']}</p></div>"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "Auto_Remediation_Check": {
              "runAfter": {
                "Multi_Channel_Notification_Switch": ["Succeeded"]
              },
              "type": "If",
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@variables('alertSeverity')",
                      "Critical"
                    ]
                  },
                  {
                    "contains": [
                      "@outputs('Parse_Alert_Data')?['alertName']",
                      "ResponseTime"
                    ]
                  }
                ]
              },
              "actions": {
                "Attempt_App_Service_Restart": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "https://management.azure.com/subscriptions/@{outputs('Parse_Alert_Data')?['subscriptionId']}/resourceGroups/@{outputs('Parse_Alert_Data')?['resourceGroup']}/providers/Microsoft.Web/sites/@{outputs('Parse_Alert_Data')?['resourceName']}/restart?api-version=2022-03-01",
                    "headers": {
                      "Authorization": "Bearer @{workflow().environment.token}",
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Log_Remediation_Action": {
                  "runAfter": {
                    "Attempt_App_Service_Restart": ["Succeeded"]
                  },
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "https://your-logging-endpoint.com/api/logs",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "body": {
                      "alertId": "@{variables('alertId')}",
                      "action": "auto_restart",
                      "resource": "@{outputs('Parse_Alert_Data')?['resourceName']}",
                      "timestamp": "@{utcNow()}"
                    }
                  }
                },
                "Send_Remediation_Notification": {
                  "runAfter": {
                    "Log_Remediation_Action": ["Succeeded"]
                  },
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "https://outlook.office365.com/webhook/api",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "body": {
                      "to": "@parameters('alertEmail')",
                      "subject": "🔧 Auto-Remediation: @{outputs('Parse_Alert_Data')?['resourceName']} Restarted",
                      "htmlBody": "<div style='background:#28a745;color:white;padding:15px;'><h3>🔧 AUTO-REMEDIATION PERFORMED</h3><p>App Service '@{outputs('Parse_Alert_Data')?['resourceName']}' has been automatically restarted due to critical response time alert.</p><p>Alert ID: @{variables('alertId')}</p><p>Time: @{utcNow()}</p></div>"
                    }
                  }
                }
              }
            },
            "Schedule_Follow_Up_Check": {
              "runAfter": {
                "Auto_Remediation_Check": ["Succeeded"]
              },
              "type": "If",
              "expression": {
                "equals": [
                  "@variables('escalationRequired')",
                  true
                ]
              },
              "actions": {
                "Wait_15_Minutes": {
                  "type": "Wait",
                  "inputs": {
                    "interval": {
                      "count": 15,
                      "unit": "Minute"
                    }
                  }
                },
                "Check_If_Alert_Still_Active": {
                  "runAfter": {
                    "Wait_15_Minutes": ["Succeeded"]
                  },
                  "type": "Http",
                  "inputs": {
                    "method": "GET",
                    "uri": "https://management.azure.com/subscriptions/@{outputs('Parse_Alert_Data')?['subscriptionId']}/providers/Microsoft.AlertsManagement/alerts?api-version=2019-05-05-preview&targetResource=@{outputs('Parse_Alert_Data')?['resourceName']}",
                    "headers": {
                      "Authorization": "Bearer @{workflow().environment.token}"
                    }
                  }
                },
                "Escalate_If_Still_Active": {
                  "runAfter": {
                    "Check_If_Alert_Still_Active": ["Succeeded"]
                  },
                  "type": "If",
                  "expression": {
                    "greater": [
                      "@length(body('Check_If_Alert_Still_Active')?['value'])",
                      0
                    ]
                  },
                  "actions": {
                    "Call_On_Call_Engineer": {
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://api.pagerduty.com/incidents",
                        "headers": {
                          "Authorization": "Token token=YOUR_PAGERDUTY_TOKEN",
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "incident": {
                            "type": "incident",
                            "title": "ESCALATED: @{outputs('Parse_Alert_Data')?['alertName']}",
                            "service": {
                              "id": "YOUR_SERVICE_ID",
                              "type": "service_reference"
                            },
                            "urgency": "high",
                            "body": {
                              "type": "incident_body",
                              "details": "Alert has not been resolved after 15 minutes and auto-remediation. Manual intervention required.\nAlert ID: @{variables('alertId')}\nResource: @{outputs('Parse_Alert_Data')?['resourceName']}"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "Store_Alert_History": {
              "runAfter": {
                "Schedule_Follow_Up_Check": ["Succeeded"]
              },
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "https://your-cosmos-db-endpoint.documents.azure.com:443/dbs/monitoring/colls/alerts/docs",
                "headers": {
                  "Authorization": "YOUR_COSMOS_AUTH_HEADER",
                  "Content-Type": "application/json"
                },
                "body": {
                  "id": "@{variables('alertId')}",
                  "alertName": "@{outputs('Parse_Alert_Data')?['alertName']}",
                  "severity": "@{variables('alertSeverity')}",
                  "resourceName": "@{outputs('Parse_Alert_Data')?['resourceName']}",
                  "timestamp": "@{outputs('Parse_Alert_Data')?['timestamp']}",
                  "status": "@{outputs('Parse_Alert_Data')?['status']}",
                  "notificationsSent": {
                    "email": true,
                    "teams": "@{if(equals(variables('alertSeverity'), 'Critical'), true, false)}",
                    "sms": "@{if(equals(variables('alertSeverity'), 'Critical'), true, false)}"
                  },
                  "autoRemediationAttempted": "@{if(contains(outputs('Parse_Alert_Data')?['alertName'], 'ResponseTime'), true, false)}",
                  "escalated": "@{variables('escalationRequired')}"
                }
              }
            }
          },
          "outputs": {
            "alertId": {
              "type": "string",
              "value": "@{variables('alertId')}"
            },
            "severity": {
              "type": "string", 
              "value": "@{variables('alertSeverity')}"
            }
          }
        },
        "parameters": {
          "alertEmail": {
            "value": "[parameters('alertEmail')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[variables('actionGroupName')]",
      "location": "Global",
      "properties": {
        "groupShortName": "AppAlerts",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "EmailAlert",
            "emailAddress": "[parameters('alertEmail')]",
            "useCommonAlertSchema": true
          }
        ],
        "webhookReceivers": []
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('actionGroupName'), '-logicapp')]",
      "location": "Global",
      "properties": {
        "groupShortName": "AppLogic",
        "enabled": true,
        "webhookReceivers": [
          {
            "name": "LogicAppWebhook",
            "serviceUri": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', parameters('logicAppName')), '/triggers/manual'), '2019-05-01').value]",
            "useCommonAlertSchema": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[variables('availabilityAlertName')]",
      "location": "Global",
      "properties": {
        "description": "Alert when the app service is not available",
        "severity": 1,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "AvailabilityCheck",
              "metricName": "Http2xx",
              "operator": "LessThan",
              "threshold": 1,
              "timeAggregation": "Total"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
          },
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', concat(variables('actionGroupName'), '-logicapp'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', concat(variables('actionGroupName'), '-logicapp'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[variables('responseTimeAlertName')]",
      "location": "Global",
      "properties": {
        "description": "Alert when response time is too high",
        "severity": 2,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "ResponseTimeCheck",
              "metricName": "HttpResponseTime",
              "operator": "GreaterThan",
              "threshold": "[parameters('responseTimeThresholdSeconds')]",
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
          },
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', concat(variables('actionGroupName'), '-logicapp'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', concat(variables('actionGroupName'), '-logicapp'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[variables('errorRateAlertName')]",
      "location": "Global",
      "properties": {
        "description": "Alert when HTTP error rate is too high",
        "severity": 2,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "ErrorRateCheck",
              "metricName": "Http5xx",
              "operator": "GreaterThan",
              "threshold": "[parameters('errorRateThresholdPercent')]",
              "timeAggregation": "Total"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
          },
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', concat(variables('actionGroupName'), '-logicapp'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', concat(variables('actionGroupName'), '-logicapp'))]"
      ]
    }
  ],
  "outputs": {
    "appServiceUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', parameters('appServiceName'))]"
    },
    "logicAppName": {
      "type": "string",
      "value": "[parameters('logicAppName')]"
    },
    "logicAppResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]"
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
    },
    "monitoringDashboardUrl": {
      "type": "string",
      "value": "[format('https://portal.azure.com/#@/resource{0}/overview', resourceId('Microsoft.Web/sites', parameters('appServiceName')))]"
    }
  }
} 